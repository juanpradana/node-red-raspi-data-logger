[
    {
        "id": "f5ffc2368251ecf5",
        "type": "tab",
        "label": "logger",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d110a615f1dcc4a1",
        "type": "http in",
        "z": "f5ffc2368251ecf5",
        "name": "get /data",
        "url": "/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "1e98c39318be8275"
            ]
        ]
    },
    {
        "id": "7a463854f7447c81",
        "type": "http response",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1420,
        "y": 140,
        "wires": []
    },
    {
        "id": "8e93254ed579f611",
        "type": "http in",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "url": "/csvDataString",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "8c9b408db73f02c3",
                "719caa40d3c0e4bf"
            ]
        ]
    },
    {
        "id": "8c9b408db73f02c3",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "response status",
        "func": "if (msg.req.query.node) {\n    msg.payload = {}\n    msg.dataStatus = 1;\n} else {\n    msg.payload = {\"message\" : \"[ERROR]You must put the query after endpoint!\"}\n    msg.dataStatus = 0;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            [
                "90e59fa37587685b",
                "fa6ba044dda99eb7"
            ]
        ]
    },
    {
        "id": "719caa40d3c0e4bf",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "post csvDataString file name",
        "func": "function addLeadingZero(num) {\n    if (num < 10) {\n        return \"0\" + num;\n    } else {\n        return num;\n    }\n}\n\nif (msg.req.query.node) {\n    const d = new Date();\n    msg.filename = `/home/pi/Desktop/data/${msg.req.query.node}/${msg.req.query.node}_${addLeadingZero(d.getDate())}${addLeadingZero(d.getMonth() + 1)}${d.getFullYear()}_${addLeadingZero(d.getHours())}${addLeadingZero(d.getMinutes())}${addLeadingZero(d.getSeconds())}.csv`;\n    msg.dataStatus = 1;\n} else {\n    msg.dataStatus = 0;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 440,
        "wires": [
            [
                "960224e63f8b5c74"
            ]
        ]
    },
    {
        "id": "222143002137c2b5",
        "type": "file",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 900,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "960224e63f8b5c74",
        "type": "switch",
        "z": "f5ffc2368251ecf5",
        "name": "check 1",
        "property": "dataStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 440,
        "wires": [
            [
                "222143002137c2b5"
            ]
        ]
    },
    {
        "id": "3bd9036f19b4c7bc",
        "type": "comment",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "info": "node-red-contrib-filesystem\n\nsudo ufw allow <port>",
        "x": 100,
        "y": 60,
        "wires": []
    },
    {
        "id": "db48a9884ccb4af0",
        "type": "http in",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "url": "/jsonData",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 500,
        "wires": [
            [
                "8c9b408db73f02c3",
                "2d65277ba982306c"
            ]
        ]
    },
    {
        "id": "2d65277ba982306c",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "post jsonData file name",
        "func": "if (msg.payload.ts && msg.payload.values) {\n    let ts = { \"ts\": msg.payload.ts }\n    let values = msg.payload.values;\n    msg.payload = { ...ts, ...values }\n    msg.payload = json2csv.parse(msg.payload);\n} else {\n    const d = new Date();\n    let ts = {\"ts\" : d.getTime()}\n    msg.payload = json2csv.parse({...ts, ...msg.payload});\n}\n\nif (msg.req.query.node) {\n    msg.filename = `/home/pi/Desktop/data/${msg.req.query.node}/${msg.req.query.node}.csv`;\n    try {\n        const file1 = fs.readFileSync(msg.filename, 'utf-8');\n        const rows1 = file1.split('\\n');\n        const file2 = msg.payload;\n        const rows2 = file2.split('\\n');\n        const rows2NoHeader = rows2.slice(1);\n        const mergedRows = rows1.concat(rows2NoHeader);\n        const csvData = mergedRows.join('\\n').replace(/,/g, ',');\n        msg.payload = csvData;\n    } catch (err) {\n        msg.errorMessange = err.message;\n        msg.payload = msg.payload;\n    }\n    \n    msg.dataStatus = 1;\n} else {\n    msg.dataStatus = 0;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "json2csv",
                "module": "json2csv"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 430,
        "y": 500,
        "wires": [
            [
                "f66e67601f1aca03"
            ]
        ]
    },
    {
        "id": "f66e67601f1aca03",
        "type": "switch",
        "z": "f5ffc2368251ecf5",
        "name": "check 1",
        "property": "dataStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 500,
        "wires": [
            [
                "a29aa938b7884964"
            ]
        ]
    },
    {
        "id": "a29aa938b7884964",
        "type": "file",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 900,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "62a6582eed8f4aae",
        "type": "http in",
        "z": "f5ffc2368251ecf5",
        "name": "get /csvFile",
        "url": "/csvFile",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 660,
        "wires": [
            [
                "6d04799f74efdc8e"
            ]
        ]
    },
    {
        "id": "51b297b9511f9807",
        "type": "file in",
        "z": "f5ffc2368251ecf5",
        "name": "read file get csvFile",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 930,
        "y": 660,
        "wires": [
            [
                "75142d0d3a5b7fd8"
            ]
        ]
    },
    {
        "id": "6d04799f74efdc8e",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "get csvFile file name",
        "func": "if (msg.req.query.node) {\n    msg.filename = `/home/pi/Desktop/data/${msg.req.query.node}/${msg.req.query.node}.csv`;\n    msg.dataStatus = 1;\n    return msg;\n} else {\n    msg.dataStatus = 0;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "b81935a68ac32da8"
            ]
        ]
    },
    {
        "id": "b81935a68ac32da8",
        "type": "switch",
        "z": "f5ffc2368251ecf5",
        "name": "check 1",
        "property": "dataStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 660,
        "wires": [
            [
                "51b297b9511f9807"
            ]
        ]
    },
    {
        "id": "75142d0d3a5b7fd8",
        "type": "change",
        "z": "f5ffc2368251ecf5",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 660,
        "wires": [
            [
                "7a463854f7447c81"
            ]
        ]
    },
    {
        "id": "1e98c39318be8275",
        "type": "template",
        "z": "f5ffc2368251ecf5",
        "name": "html template",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <title>Data Logger</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #F5F5F5;\n            margin: 0;\n            padding: 0;\n        }\n\n        h1 {\n            color: #333;\n            text-align: center;\n            font-size: 2.5rem;\n            margin-top: 2rem;\n        }\n\n        h2 {\n            color: #333;\n            font-size: 2rem;\n            margin-top: 1.5rem;\n            margin-bottom: 0.5rem;\n        }\n\n        h3 {\n            color: #333;\n            font-size: 1.5rem;\n            margin-top: 1.5rem;\n            margin-bottom: 0.5rem;\n        }\n\n        p {\n            color: #333;\n            font-size: 1rem;\n            margin: 0.5rem 0;\n        }\n\n        .container {\n            max-width: 960px;\n            margin: auto;\n            padding: 2rem;\n            background-color: #FFFFFF;\n            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n        }\n\n        .container h1,\n        .container h2,\n        .container h3,\n        .container p {\n            margin-left: 1rem;\n            margin-right: 1rem;\n        }\n\n        .container h2:first-of-type,\n        .container h3:first-of-type {\n            margin-top: 2rem;\n        }\n\n        .container h3:not(:first-of-type) {\n            margin-top: 1rem;\n        }\n\n        .container p:not(:last-child) {\n            border-bottom: 1px solid #ddd;\n            padding-bottom: 0.5rem;\n        }\n\n        @media screen and (max-width: 480px) {\n            .container {\n                padding: 1rem;\n            }\n\n            h1 {\n                font-size: 2rem;\n                margin-top: 1.5rem;\n            }\n\n            h2 {\n                font-size: 1.5rem;\n                margin-top: 1rem;\n            }\n\n            h3 {\n                font-size: 1.25rem;\n                margin-top: 1rem;\n            }\n\n            p {\n                font-size: 0.9rem;\n                margin: 0.25rem 0;\n            }\n\n            table {\n                font-size: 14px;\n            }\n        }\n\n        table {\n            margin: auto;\n            border-collapse: collapse;\n            margin-bottom: 20px;\n            width: 80%;\n            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n        }\n\n        th,\n        td {\n            padding: 10px;\n            border: 1px solid #ddd;\n            text-align: left;\n        }\n\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <h1>Data Logger</h1>\n        <h2>Under Development!</h2>\n        <table>\n            <tr>\n                <th>HTTP Method</th>\n                <th>Address</th>\n                <th>Detail</th>\n            </tr>\n            <tr>\n                <td>GET</td>\n                <td>ip:port/data</td>\n                <td>We will receive html</td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>ip:port/zipData?node={Your_Node}</td>\n                <td>We will receive zip file</td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>ip:port/csvFile?node={Your_Node}</td>\n                <td>We will receive csv file</td>\n            </tr>\n            <tr>\n                <td>POST</td>\n                <td>ip:port/csvDataString?node={Your_Node}</td>\n                <td>Body data is csv format (content-type: text/plain)</td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>ip:port/csvFile?node={Your_Node}</td>\n                <td>Body data is form-data (content-type: multipart/form-data; boundary=&lt;value&gt;)</td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>ip:port/jsonData?node={Your_Node}</td>\n                <td>Body data is json format (content-type: application/json), use thingsboard ip telemetry body data\n                    format\n                </td>\n            </tr>\n        </table>\n    </div>\n</body>\n\n</html>",
        "output": "str",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "7a463854f7447c81"
            ]
        ]
    },
    {
        "id": "269252074fbf23ae",
        "type": "catch",
        "z": "f5ffc2368251ecf5",
        "name": "catch get csvFile",
        "scope": [
            "51b297b9511f9807"
        ],
        "uncaught": false,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "e38e6369c6181e44"
            ]
        ]
    },
    {
        "id": "e38e6369c6181e44",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "error message function",
        "func": "msg.payload = {\n    \"message\" : msg.error.message\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 380,
        "wires": [
            [
                "1c8c3d7acc04bc03"
            ]
        ]
    },
    {
        "id": "1c8c3d7acc04bc03",
        "type": "http response",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 1420,
        "y": 380,
        "wires": []
    },
    {
        "id": "7754f26ee1882a01",
        "type": "http response",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "statusCode": "201",
        "headers": {},
        "x": 1420,
        "y": 200,
        "wires": []
    },
    {
        "id": "90e59fa37587685b",
        "type": "switch",
        "z": "f5ffc2368251ecf5",
        "name": "check 1",
        "property": "dataStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "7754f26ee1882a01"
            ]
        ]
    },
    {
        "id": "9a040c64c15e9131",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "post error message function",
        "func": "msg.msg.error.message = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 380,
        "wires": [
            [
                "e38e6369c6181e44"
            ]
        ]
    },
    {
        "id": "fa6ba044dda99eb7",
        "type": "switch",
        "z": "f5ffc2368251ecf5",
        "name": "check 0",
        "property": "dataStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 380,
        "wires": [
            [
                "9a040c64c15e9131"
            ]
        ]
    },
    {
        "id": "8e6aaf00fe4aac79",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "post csv file algorithm",
        "func": "msg.payload = msg.req.files[0].buffer;\n\nfunction addLeadingZero(num) {\n    if (num < 10) {\n        return \"0\" + num;\n    } else {\n        return num;\n    }\n}\n\nif (msg.req.query.node) {\n    const d = new Date();\n    msg.filename = `/home/pi/Desktop/data/${msg.req.query.node}/${msg.req.query.node}_${addLeadingZero(d.getDate())}${addLeadingZero(d.getMonth() + 1)}${d.getFullYear()}_${addLeadingZero(d.getHours())}${addLeadingZero(d.getMinutes())}${addLeadingZero(d.getSeconds())}.csv`;\n    msg.dataStatus = 1;\n} else {\n    msg.dataStatus = 0;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 600,
        "wires": [
            [
                "c10c807b2950751c"
            ]
        ]
    },
    {
        "id": "8b85fdc40c035bdf",
        "type": "file",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 900,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "90c971942eede321",
        "type": "http in",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "url": "/csvFile",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "8e6aaf00fe4aac79"
            ]
        ]
    },
    {
        "id": "c10c807b2950751c",
        "type": "switch",
        "z": "f5ffc2368251ecf5",
        "name": "check 1",
        "property": "dataStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 600,
        "wires": [
            [
                "8b85fdc40c035bdf"
            ]
        ]
    },
    {
        "id": "ace5fb5580a051ce",
        "type": "http in",
        "z": "f5ffc2368251ecf5",
        "name": "get /zipData",
        "url": "/zipData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "ba5427d4fd546a62"
            ]
        ]
    },
    {
        "id": "706b168157f0506a",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "get zipData programs",
        "func": "if (msg.req.query.node) {\n    zipAFolder.zip(msg.filename, `/home/pi/Desktop/data/${msg.req.query.node}.zip`);\n    const filePath = `/home/pi/Desktop/data/${msg.req.query.node}.zip`;\n    const fileName = `${msg.req.query.node}.zip`;\n    var fileData = fs.readFileSync(filePath);\n\n    msg.headers = {\n        'Content-Type': 'application/zip',\n        'Content-Disposition': `attachment; filename=${fileName}`\n    };\n\n    msg.payload = fileData;\n    msg.dataStatus = 1;\n} else {\n    msg.dataStatus = 0;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "zipAFolder",
                "module": "zip-a-folder"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 940,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "3dc0dc82a065936d",
        "type": "switch",
        "z": "f5ffc2368251ecf5",
        "name": "check 1",
        "property": "dataStatus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1180,
        "y": 720,
        "wires": [
            [
                "7a463854f7447c81"
            ]
        ]
    },
    {
        "id": "a1dcf79563097f7f",
        "type": "fs-stats",
        "z": "f5ffc2368251ecf5",
        "name": "zipData dir stats",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "attr": "",
        "follow": true,
        "property": "stats",
        "propertyType": "msg",
        "x": 680,
        "y": 720,
        "wires": [
            [
                "e802348ee7178455"
            ]
        ]
    },
    {
        "id": "ba5427d4fd546a62",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "get zipData file name",
        "func": "msg.filename = `/home/pi/Desktop/data/${msg.req.query.node}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "a1dcf79563097f7f"
            ]
        ]
    },
    {
        "id": "0caf24b484b58bf4",
        "type": "catch",
        "z": "f5ffc2368251ecf5",
        "name": "catch get zipData",
        "scope": [
            "a1dcf79563097f7f"
        ],
        "uncaught": false,
        "x": 680,
        "y": 320,
        "wires": [
            [
                "e38e6369c6181e44"
            ]
        ]
    },
    {
        "id": "20e67b5a1296d581",
        "type": "tcp in",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "server": "server",
        "host": "localhost",
        "port": "2001",
        "datamode": "single",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "16e01d547cc23238",
                "7bea111ace10c0af"
            ]
        ]
    },
    {
        "id": "3b69cf92e2973beb",
        "type": "debug",
        "z": "f5ffc2368251ecf5",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 820,
        "wires": []
    },
    {
        "id": "16e01d547cc23238",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "save data eddy 1",
        "func": "msg.payload = JSON.parse(msg.payload);\n\n/**\n* @param {any} filePath\n*/\nfunction fileExists(filePath) {\n    try {\n        fs.accessSync(filePath);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\n/**\n* @param {number} num\n*/\nfunction addLeadingZero(num) {\n    if (num < 10) {\n        return \"0\" + num;\n    } else {\n        return num;\n    }\n}\n\nif (msg.payload.ts && msg.payload.values) {\n    let ts = { \"ts\": msg.payload.ts }\n    let values = msg.payload.values;\n    msg.payload = { ...ts, ...values }\n    msg.payload = json2csv.parse(msg.payload);\n} else {\n    const date = new Date();\n    let humanTime = { \"humanTime\": date.toISOString().slice(0, -1) + '000Z' };\n    let ts = { \"ts\": date.getTime() }\n\n    msg.payload = json2csv.parse({ ...humanTime, ...ts, ...msg.payload });\n}\n\nconst d = new Date();\nconst directoryPath = '/home/pi/Desktop/data/test_eddy1';\n\nmsg.filename = `/home/pi/Desktop/data/test_eddy1/test_eddy1_${addLeadingZero(d.getDate())}${addLeadingZero(d.getMonth() + 1)}${d.getFullYear()}.csv`;\ntry {\n    if (!fileExists(msg.filename)) {\n        const file = msg.payload;\n        const rows = file.split('\\n');\n        const rowsHeader = rows[0] + \"\\n\";\n        fs.mkdirSync(directoryPath, { recursive: true });\n        fs.writeFileSync(msg.filename, rowsHeader);\n    }\n    const file = msg.payload;\n    const rows = file.split('\\n');\n    const rowsNoHeader = rows[1] + \"\\n\";\n    fs.appendFileSync(msg.filename, rowsNoHeader);\n} catch (err) {\n    msg.errorMessange = err.message;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "json2csv",
                "module": "json2csv"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 410,
        "y": 820,
        "wires": [
            [
                "3b69cf92e2973beb"
            ]
        ]
    },
    {
        "id": "7bea111ace10c0af",
        "type": "tcp out",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 370,
        "y": 880,
        "wires": []
    },
    {
        "id": "e802348ee7178455",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "get zipData programs",
        "func": "/**\n* @param {any} folderPath\n* @param {any} zipPath\n*/\nasync function compressFolder(folderPath, zipPath) {\n    const zip = new JSZip();\n    const files = fs.readdirSync(folderPath);\n\n    for (const file of files) {\n        const filePath = `${folderPath}/${file}`;\n        const fileData = fs.readFileSync(filePath);\n        zip.file(file, fileData);\n    }\n\n    const zipData = await zip.generateAsync({\n        type: 'nodebuffer',\n        compression: 'DEFLATE', //STORE DEFLATE BZIP2 LZMA\n    });\n    \n    fs.writeFileSync(zipPath, zipData);\n}\n\nif (msg.req.query.node) {\n    compressFolder(`/home/pi/Desktop/data/${msg.req.query.node}`, `/home/pi/Desktop/data/${msg.req.query.node}.zip`);\n    const filePath = `/home/pi/Desktop/data/${msg.req.query.node}.zip`;\n    const fileName = `${msg.req.query.node}.zip`;\n    var fileData = fs.readFileSync(filePath);\n\n    msg.headers = {\n        'Content-Type': 'application/zip',\n        'Content-Disposition': `attachment; filename=${fileName}`\n    };\n\n    msg.payload = fileData;\n    msg.dataStatus = 1;\n} else {\n    msg.dataStatus = 0;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "JSZip",
                "module": "jszip"
            }
        ],
        "x": 940,
        "y": 760,
        "wires": [
            [
                "3dc0dc82a065936d"
            ]
        ]
    },
    {
        "id": "5748f0792b1faced",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "d": true,
        "name": "remove data more than 14 days",
        "func": "const folderPath = '/home/pi/Desktop/data'; // Path of parent folder\nconst daysThreshold = 14; // days threshold\n\n/**\n* @param {any} folderPath\n* @param {number} daysThreshold\n*/\nfunction deleteFilesOlderThan(folderPath, daysThreshold) {\n    const files = fs.readdirSync(folderPath);\n\n    for (const file of files) {\n        const filePath = path.join(folderPath, file);\n        const stats = fs.statSync(filePath);\n        const modifiedTime = stats.mtime;\n        const currentDate = new Date();\n        // @ts-ignore\n        const diffTime = Math.abs(currentDate - modifiedTime);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n        if (diffDays > daysThreshold) {\n            fs.unlinkSync(filePath);\n            console.log(`File ${filePath} dihapus karena lebih dari ${daysThreshold} hari.`);\n        }\n    }\n}\n\n// Recursive function to check each folder in the parent folder\n/**\n* @param {string} folderPath\n* @param {number} daysThreshold\n*/\nfunction checkFolders(folderPath, daysThreshold) {\n    const folders = fs.readdirSync(folderPath);\n\n    for (const folder of folders) {\n        const folderPathname = path.join(folderPath, folder);\n        const stats = fs.statSync(folderPathname);\n\n        if (stats.isDirectory()) {\n            deleteFilesOlderThan(folderPathname, daysThreshold);\n            checkFolders(folderPathname, daysThreshold);\n        }\n    }\n}\n\n// run program\ncheckFolders(folderPath, daysThreshold);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 450,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "37f2e3d630435188",
        "type": "inject",
        "z": "f5ffc2368251ecf5",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "5748f0792b1faced"
            ]
        ]
    },
    {
        "id": "5c4b65cbc52ea0b9",
        "type": "tcp in",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "server": "server",
        "host": "localhost",
        "port": "2002",
        "datamode": "single",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "3f7da4fbb91dc950",
                "376d2e5f0392a60d"
            ]
        ]
    },
    {
        "id": "d6be4ed294d30a3f",
        "type": "debug",
        "z": "f5ffc2368251ecf5",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 940,
        "wires": []
    },
    {
        "id": "3f7da4fbb91dc950",
        "type": "function",
        "z": "f5ffc2368251ecf5",
        "name": "save data eddy 2",
        "func": "msg.payload = JSON.parse(msg.payload);\n\n/**\n* @param {any} filePath\n*/\nfunction fileExists(filePath) {\n    try {\n        fs.accessSync(filePath);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\n/**\n* @param {number} num\n*/\nfunction addLeadingZero(num) {\n    if (num < 10) {\n        return \"0\" + num;\n    } else {\n        return num;\n    }\n}\n\nif (msg.payload.ts && msg.payload.values) {\n    let ts = { \"ts\": msg.payload.ts }\n    let values = msg.payload.values;\n    msg.payload = { ...ts, ...values }\n    msg.payload = json2csv.parse(msg.payload);\n} else {\n    const date = new Date();\n    let humanTime = {\"humanTime\": date.toISOString().slice(0, -1) + '000Z'};\n    let ts = {\"ts\" : date.getTime()}\n\n    msg.payload = json2csv.parse({...humanTime, ...ts, ...msg.payload});\n}\n\nconst d = new Date();\nconst directoryPath = '/home/pi/Desktop/data/test_eddy2';\n\nmsg.filename = `/home/pi/Desktop/data/test_eddy2/test_eddy2_${addLeadingZero(d.getDate())}${addLeadingZero(d.getMonth() + 1)}${d.getFullYear()}.csv`;\ntry {\n    if (!fileExists(msg.filename)) {\n        const file = msg.payload;\n        const rows = file.split('\\n');\n        const rowsHeader = rows[0] + \"\\n\";\n        fs.mkdirSync(directoryPath, { recursive: true });\n        fs.writeFileSync(msg.filename, rowsHeader);\n    }\n    const file = msg.payload;\n    const rows = file.split('\\n');\n    const rowsNoHeader = rows[1] + \"\\n\";\n    fs.appendFileSync(msg.filename, rowsNoHeader);\n} catch (err) {\n    msg.errorMessange = err.message;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "json2csv",
                "module": "json2csv"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 410,
        "y": 940,
        "wires": [
            [
                "d6be4ed294d30a3f"
            ]
        ]
    },
    {
        "id": "376d2e5f0392a60d",
        "type": "tcp out",
        "z": "f5ffc2368251ecf5",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 370,
        "y": 1000,
        "wires": []
    }
]
